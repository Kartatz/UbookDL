name: Java Ci

on:
  push:
    branches:
        - '**'

jobs:
  setup-dependencies:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@main
      with:
        submodules: true
    - name: Setup Linux cross compiler
      run: |
        sudo apt update
        sudo apt install --assume-yes gcc-arm-linux-gnueabi gcc-aarch64-linux-gnu gcc-i686-linux-gnu
    - name: Setup Android cross compiler
      uses: nttld/setup-ndk@main
      id: setup-ndk
      with:
        ndk-version: r25b
    - name: Setup ANDROID_HOME
      run: echo 'ANDROID_HOME=${{ steps.setup-ndk.outputs.ndk-path }}' >> "${GITHUB_ENV}"
    - name: Setup Windows cross compiler
      run: |
        declare -r LLVM_MINGW_TAG="$(jq --raw-output '.tag_name' <<< "$(curl --silent --url 'https://api.github.com/repos/mstorsjo/llvm-mingw/releases/latest')")"
        declare -r LLVM_MINGW_TARBALL='/tmp/llvm-mingw.tar.xz'
        declare -r LLVM_MINGW_URL="https://github.com/mstorsjo/llvm-mingw/releases/download/${LLVM_MINGW_TAG}/llvm-mingw-${LLVM_MINGW_TAG}-msvcrt-ubuntu-18.04-x86_64.tar.xz"
        
        curl --silent --location --url "${LLVM_MINGW_URL}" --output "${LLVM_MINGW_TARBALL}"
        tar --directory="$(dirname "${LLVM_MINGW_TARBALL}")" --extract --file="${LLVM_MINGW_TARBALL}"
        
        echo "LLVM_MINGW_HOME=$(dirname "${LLVM_MINGW_TARBALL}")/$(basename "${LLVM_MINGW_URL}" '.tar.xz')" >> "${GITHUB_ENV}"
    - name: Build with CMake
      run: |
        
        declare -r MACHINE_HOST="$(gcc -dumpmachine)"
        
        declare -r targets=(
            aarch64-linux-android
            aarch64-linux-gnu
            aarch64-w64-mingw32
            arm-linux-gnueabi
            armv7-w64-mingw32
            armv7a-linux-androideabi
            i686-linux-android
            i686-linux-gnu
            i686-w64-mingw32
            x86_64-linux-android
            x86_64-w64-mingw32
            "${MACHINE_HOST}"
        )
        
        declare -r TARBALLS_DIRECTORY="$(realpath './tarballs')"
        
        mkdir --parent "${TARBALLS_DIRECTORY}"
        mkdir build && cd build
        
        for target in "${targets[@]}"; do
            echo "Building for ${target}"
            
            if [ "${target}" == "${MACHINE_HOST}" ]; then
                cmake -Wno-dev \
                    -DCMAKE_INSTALL_PREFIX="${target}" \
                    -DCMAKE_BUILD_TYPE=MinSizeRel ../ 1>/dev/null
            else
                cmake -Wno-dev \
                    -DCMAKE_TOOLCHAIN_FILE="./.github/workflows/cmake_toolchains/${target}.cmake" \
                    -DCMAKE_INSTALL_PREFIX="${target}" \
                    -DCMAKE_BUILD_TYPE=MinSizeRel ../ 1>/dev/null
            fi
            
            cmake --build ./ -j 1 1>/dev/null
            
            cmake --install ./ 1>/dev/null
            
            tar --create --file=- "${target}" |  xz --compress -9 > "${TARBALLS_DIRECTORY}/${target}.tar.xz"
            
            rm --force --recursive ./*
        done
    - name: Upload artifact
      uses: actions/upload-artifact@main
      with:
        path: ./tarballs